{
/*
  * ESLINT environments
  * Adds global variables for these environments
  */ 
  "env": {
    "browser": true, // Browser global variables
    "node": true, // node global variables and node rules
    "amd": true, // require() and define() variables
    "mocha":true // mocha testing variables
  },
 
 /*
 * ESLINT rules
 * Use the rules from http://eslint.org/docs/rules/
 * 0 - off
 * 1 - sets off warning
 * 2 - sets off error
 */
  "rules": {
    // Possible Errors
    "no-cond-assign":2, // disallow assignment in conditional expressions 
    "no-console": 2, // disallow use of the console. don't want this in prod unless using node.js
    "no-constant-condition":2, // disallow use of constant expressions in conditions ('true','false', a number)
    "no-comma-dangle": 2, // disallow dangling commas in object literals (early ie versions don't support it)
    "no-control-regex": 2, // disallow control characters in regular expressions
    "no-debugger": 2, // disallow debugger statements. don't want this in prod
    "no-dupe-keys": 2, // disallow having the same key in an object
    "no-empty": 2, // disallow have empty block statements
    "no-empty-class": 2, // disallow use of empty character classes in regular expressions
    "no-ex-assign": 2, // disallow overrighting a reference to an error in a catch block
    "no-extra-boolean-cast": 2, // disallow extra boolean conditions (double negation)
    "no-extra-parens": 2, // disallow unnecessary parens
    "no-extra-semi": 2, // disallow unnecessary semi-colons
    "no-func-assign": 1, // disallow overwriting functions that were created as a function declaration
    "no-inner-declarations": 2, // disallow declaring functions in another function, keeps declarations at the top for clarity
    "no-invalid-regexp": 2, // disallow invalid regex 
    "no-negated-in-lhs": 2, // disallow negated left operand of an in operator
    "no-obj-calls": 2, // disallow global object function calls, cant use Math and JSON objects as functions
    "no-regex-spaces": 2, // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 2, // disallow arrays with empty spots [,,]
    "no-unreachable": 2, // disallow unreachable code
    "use-isnan": 2, // disallow comparison with the value NaN
    // ensure jsdocs comments are valid
    "valid-jsdoc": [ 2, {
      "return":"return", // enforce using either @return or @returns
      "requireReturn": false // if a function doesn't return anything, you don't have to include @return {void}
    }],
    "valid-typeof": 2, // ensure that typeof are comparing a valid string
  
    // Best Practices
    "block-scoped-var": 2, // requires using variables inside of the scope they were defined in
    "complexity": [ 2, 7 ], // specifies the maximum cyclomatic complexity allowed in a program
    "consistent-return": 2, // require return statements to either always or never specify values within a block;
    "curly": 2, // require following curly braces
    "default-case": 2, // require a default case in switch statements
    "dot-notation": 2, // encourage dot notation whenever possible
    "eqeqeq": 2, // require use of ===
    "guard-for-in": 2, // make sure for-in loops do hasOwnProperty 
    "no-alert": 2, // prevents alerts
    "no-caller": 2, // disallow arguments.caller or arguments.callee
    "no-div-regex": 2, // disallow division operator at beginning of regular expression
    "no-else-return": 2, // disallow putting return statements in else blocks, because they are unnecessary
    "no-empty-label": 2, // can only use label with iteration or switch
    "no-eq-null": 2, // have to use === when comparing with null
    "no-eval": 2, // can't use eval()
    "no-extend-native": 1, // can't extend native types
    "no-fallthrough": 2, // have to use break; in switch statements
    "no-floating-decimal": 2, // can't have a number start with . (e.g. var num = .5)
    "no-implied-eval": 2, // disallow use of eval-like methods (e.g. setTimeout("alert('hi');"))
    "no-labels": 2, // disallow use of label statements
    "no-iterator": 2, // disallow use of __iterator__ property
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow creation of function within loops
    "no-multi-str": 2, // disallow use of multi-string lines
    "no-native-reassign": 2, // disallow reassignment of native objects
    "no-new": 2, // disallow new operator when not part of an assignment
    "no-new-func": 2, // disallow use of new operator for Function object
    "no-new-wrappers": 2, // disallow creating new instances of String, Number, and Boolean
    "no-octal": 2, // disallow use of octal literals ( e.g. var num = 071 )
    "no-octal-escape": 2, // disallow use of octal escape characters ( e.g. var foo = "Copyright \251"; )
    "no-proto": 2, // disallow use of __proto__ property
    "no-redeclare": 2, // disallow redeclaring the same variable more than once
    "no-return-assign": 2, // disallow use of assignment in return statement
    "no-script-url": 2, // no javascript: urls (e.g. location.href = "javascript:void(0)"; )
    "no-self-compare": 2, // don't compare a value to itself
    "no-sequences": 2, // disallow use of comma operator
    "no-unused-expressions": 2, // disallow usage of expressions in statement position
    "no-warning-comments": 2, // disallows warning comments.  Makes sure TODO: and FIXME: comments are found
    "no-with": 2, // disallows with statements
    "no-yoda": 2, // disallows Yoda expressions.  The code needs to read like straight english, not like how yoda talks
    "radix": 2, // requires the second parameter in parseInt so that the number isn't the wrong base (a decimal instead of base 10)
    "wrap-iife": [2, "outside"], // requires self invoking functions to be wrapped in parens
    
    // Strict mode
    "no-global-strict": 2, // disallow use of "use strict" in global scope
    "no-extra-strict": 2, // disallow use of extra "use strict" statements when already in strict mode
    "strict": 2, // all functions must be run in strict mode
    
    // variable declarations
    "no-catch-shadow": 2,
    "no-delete-var": 2,
    "no-label-var": 2,
    "no-undef": 2,
    "no-undef-init": 2,
    "no-unused-vars": 2,
    "no-use-before-define": 2,
 
    "handle-callback-err": 2,
    "no-path-concat": 2,
    "no-mixed-requires": 2,
    "no-sync": 2,
 
    "brace-style": 2,
    "camelcase": 2,
    "consistent-this": [2, "self"],
    "new-cap": 2,
    "new-parens": 2,
    "no-array-constructor": 2,
    "no-new-object": 2,
    "no-spaced-func": 2,
    "no-space-before-semi": 2,
    "quotes": [2, "single"],
    "space-in-brackets": [2, "always"],
    "space-infix-ops": 2,
    "space-return-throw-case": 2,
    "space-unary-word-ops": 2,
    "max-nested-callbacks": [2, 3],
    "max-len": [2, 80, 4],
    "max-params": [2, 3]
  },

  /* 
  * ESLINT Globals
  * define what your global variables are
  */
  "globals": {

  }
}
